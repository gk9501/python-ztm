#+title: Object Oriented Programming

* Introduction
+ Everything is an object in Python, because everything is built by the ~class~ keyword.
+ We can perform actions on our objects in Python using their respective methods.
+ Objects possess attributes as well as methods.
+ We can use the ~class~ keyword to build custom objects.
+ OOP is a paradigm, that allows us to structure our code in such a way that it is easy to maintain, extend and write.

* Classes vs Objects
+ Classes are the blueprints that have the basic set of attributes and methods.
+ Different objects can be created from a class, by using it as a building block.
+ "Instantiating a class" means that an instance (object) is created from a class. For example:

#+begin_src python
class BigObject: # this is a class
    pass

obj1 = BigObject() # this is instantiating the BigObject class
obj2 = BigObject()
obj3 = BigObject()

print(type(obj1)) # this prints <class '__main__.BigObject'>
#+end_src

* ~__init__~ method
+ The ~__init__~ method in a class is what is called as a dunder method or magic method. It is a constructor method within a class.

#+begin_src python
class BigObject:
    def __init__(self, name):
        self.name = name
#+end_src

+ In the above example code, we can see that the ~self~ keyword is set as one of the parameters of the ~__init__~ method. In fact it is a default keyword in all the methods within a class.
+ ~self~ refers to the object created from a class.
+ Dot notation is used to assign and access attributes of an object created from a class. In this example, ~self.name~ refers to the ~name~ attribute of ~self~, which represents the object.

* Class Object Attributes
Class object attributes are attributes of a class that do not change. They can be referred to using the class blueprint itself, compared to the attributes defined in the constructor function ~__init__~, which are referred to using ~self~.

* ~@classmethod~ and ~@staticmethod~ decorators
+ The ~@classmethod~ decorator allows a method of a class to be used without instantiating the class. In other words, it is a method on the actual class.
+ The ~@staticmethod~ decorator works the same way as the ~@classmethod~ one, and allows a method of a class to be used without instantiating the class, except that it does not allow us to specify the class as a parameter.
+ So, the difference between the two is that ~@classmethod~ is used when we want to modify the attributes, while ~@staticmethod~ is used when we don't want to do anything to the attributes.

* Four Pillars of OOP
** Encapsulation
It is the bundling of data, along with the methods that operate on that data, into a single unit.

#+begin_src python
class PlayerCharacter:
    def __init__(self, name='anonymous', age=0):
        self.name = name
        self.age = age

    def speak(self):
        print(f'my name is {self.name} and I am {self.age} years old.')

player1 = PlayerCharacter('Gokul', 120)
player1.speak()
#+end_src

** Abstraction
+ It means hiding of/abstracting away information, and giving access to only necessary information. It makes us more efficient and prevents wastage of time.
+ So, the power of OOP is that things which we don't really need to know about in-depth are abstracted away from us.
+ _Public vs Private variables_: Unlike in languages like Java, where you can specify variables to be public or private using a keyword and control the access of attributes in classes, Python has no true private variables.

  - So in Python, we can start variables that we want to keep private with an underscore. It is a convention in Python, which tells other Python programmers which variables are private and which are not.

  - However, this does not solve the problem of there being no true private variables in Python.

** Inheritance
+ Inheritance allows new objects to take on the properties of existing objects. So, classes can be inherited.
+ We have a parent class and children classes. Sometimes these children classes are called sub-classes or derived classes.
+ The ~isinstance()~ function in Python allows us to check whether an object is an instance of a class.
+ An object created from a subclass is an instance of the parent class of the subclass as well.
+ Everything in Python inherits attributes and methods from the ~object~ base class that Python comes with.

** Polymorphism
+ The idea of polymorphism refers to the way in which object classes can share the same method names, but those method names can act differently based on what object calls them.
+ It allows us to have many forms, i.e., the ability to redefine methods in derived classes. An object that gets instantiated can be made to behave in different ways using this concept of polymorphism.

* Object Introspection
+ In computer programming, introspection means the ability to determine the type of an object at runtime.
+ Python allows us to inspect objects with a helper function.
+ The helper function is ~dir()~. It tells us the attributes and methods that a class has.

* Dunder Methods
Dunder or magic methods in Python are the methods having two prefix and suffix underscores in the method name. Dunder here means “Double Under (Underscores)”.

* Method Resolution Order (MRO)
+ MRO is a rule that Python follows to determine what to do when there are common classes, methods or attributes.

+ The ~mro()~ function in Python shows the order in which methods and attributes are checked.

+ Example:
  #+begin_src python
  class A:
      num = 10

  class B(A):
      pass

  class C(A):
      num = 1

  class D(B, C):
      pass

  #    A
  #  /   \
  # /     \
  # B     C
  #  \   /
  #   \ /
  #    D
  #+end_src
