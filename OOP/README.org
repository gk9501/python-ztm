#+title: Object Oriented Programming

* Introduction
+ Everything is an object in Python, because everything is built by the ~class~ keyword.
+ We can perform actions on our objects in Python using their respective methods.
+ Objects possess attributes as well as methods.
+ We can use the ~class~ keyword to build custom objects.
+ OOP is a paradigm, that allows us to structure our code in such a way that it is easy to maintain, extend and write.

* Classes vs Objects
+ Classes are the blueprints that have the basic set of attributes and methods.
+ Different objects can be created from a class, by using it as a building block.
+ "Instantiating a class" means that an instance (object) is created from a class. For example:

#+begin_src python
class BigObject: # this is a class
    pass

obj1 = BigObject() # this is instantiating the BigObject class
obj2 = BigObject()
obj3 = BigObject()

print(type(obj1)) # this prints <class '__main__.BigObject'>
#+end_src

* ~__init__~ method
+ The ~__init__~ method in a class is what is called as a dunder method or magic method. It is a constructor method within a class.

#+begin_src python
class BigObject:
    def __init__(self, name):
        self.name = name
#+end_src

+ In the above example code, we can see that the ~self~ keyword is set as one of the parameters of the ~__init__~ method. In fact it is a default keyword in all the methods within a class.
+ ~self~ refers to the object created from a class.
+ Dot notation is used to assign and access attributes of an object created from a class. In this example, ~self.name~ refers to the ~name~ attribute of ~self~, which represents the object.

* Class Object Attributes
Class object attributes are attributes of a class that do not change. They can be referred to using the class blueprint itself, compared to the attributes defined in the constructor function ~__init__~, which are referred to using ~self~.

* ~@classmethod~ and ~@staticmethod~ decorators
+ The ~@classmethod~ decorator allows a method of a class to be used without instantiating the class. In other words, it is a method on the actual class.
+ The ~@staticmethod~ decorator works the same way as the ~@classmethod~ one, and allows a method of a class to be used without instantiating the class, except that it does not allow us to specify the class as a parameter.
+ So, the difference between the two is that ~@classmethod~ is used when we want to modify the attributes, while ~@staticmethod~ is used when we don't want to do anything to the attributes.
